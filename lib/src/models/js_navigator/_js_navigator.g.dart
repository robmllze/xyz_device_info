//.title
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//
// GENERATED BY ðŸ‡½ðŸ‡¾ðŸ‡¿ GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/xyz_gen
//
// â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“â–“
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: empty_constructor_bodies
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_this

part of 'js_navigator.dart';

// â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘â–‘

class JsNavigator extends Model {
  //
  //
  //

  static const K_USER_AGENT = 'user_agent';

  static const CLASS = 'JsNavigator';

  @override
  String get $class => CLASS;

  String? userAgent;

  //
  //
  //

  JsNavigator.empty();

  //
  //
  //

  factory JsNavigator({
    String? userAgent,
  }) {
    return JsNavigator.b(
      userAgent: userAgent,
    );
  }

  //
  //
  //

  JsNavigator.b({
    this.userAgent,
  }) {}

  //
  //
  //

  factory JsNavigator.from(
    Model? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'JsNavigator.from: $e');
      rethrow;
    }
  }

  static JsNavigator? fromOrNull(
    Model? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  //
  //
  //

  factory JsNavigator.of(
    JsNavigator other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'JsNavigator.of: $e');
      rethrow;
    }
  }

  static JsNavigator? ofOrNull(
    JsNavigator? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  //
  //
  //

  factory JsNavigator.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'JsNavigator.fromJsonString: $e');
      rethrow;
    }
  }

  static JsNavigator? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return JsNavigator.fromJson(decoded);
      } else {
        return JsNavigator.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  factory JsNavigator.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'JsNavigator.fromJson: $e');
      rethrow;
    }
  }

  static JsNavigator? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return JsNavigator.empty()..$userAgent = otherData?[K_USER_AGENT];
    } catch (e) {
      return null;
    }
  }

  //
  //
  //

  factory JsNavigator.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'JsNavigator.fromUri: $e');
      rethrow;
    }
  }

  static JsNavigator? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS) {
        return JsNavigator.fromJson(uri.queryParameters);
      } else {
        return JsNavigator.empty();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    dynamic defaultValue,
    bool includeNulls = false,
  }) {
    try {
      final withNulls = <String, dynamic>{
        K_USER_AGENT: this.$userAgent,
      }.mapWithDefault(defaultValue);
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'JsNavigator.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  T empty<T extends Model>() {
    return JsNavigator.b() as T;
  }

  //
  //
  //

  @override
  T copy<T extends Model>() {
    return (JsNavigator.b()..updateWith(this)) as T;
  }

  //
  //
  //

  @override
  void updateWithJson(
    Map<String, dynamic>? otherData,
  ) {
    if (otherData != null && otherData.isNotEmpty) {
      final other = JsNavigator.fromJson(otherData);
      if (other.userAgent != null) {
        this.userAgent = other.userAgent!;
      }
    }
  }

  //
  //
  //

  // userAgent.
  String? get userAgentField => this.userAgent;
  set userAgentField(String? v) => this.userAgent = v;
  @protected
  dynamic get $userAgent => this.userAgent?.toString().trim().nullIfEmpty;
  @protected
  set $userAgent(v) => this.userAgent = v?.toString().trim().nullIfEmpty;
}
