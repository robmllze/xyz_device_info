//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'model_basic_device_info.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelBasicDeviceInfo extends _ModelBasicDeviceInfo {
  //
  //
  //

  static const CLASS_NAME = 'ModelBasicDeviceInfo';

  @override
  String get $className => CLASS_NAME;

  final String? operatingSystem;
  final String? userAgent;
  final bool? isInstalled;

  //
  //
  //

  const ModelBasicDeviceInfo({
    this.operatingSystem,
    this.userAgent,
    this.isInstalled,
  });

  const ModelBasicDeviceInfo.c2({
    this.operatingSystem,
    this.userAgent,
    this.isInstalled,
  });

  factory ModelBasicDeviceInfo.c3({
    String? operatingSystem,
    String? userAgent,
    bool? isInstalled,
  }) {
    return ModelBasicDeviceInfo(
      operatingSystem: operatingSystem,
      userAgent: userAgent,
      isInstalled: isInstalled,
    );
  }

  factory ModelBasicDeviceInfo.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelBasicDeviceInfo.from: $e');
      rethrow;
    }
  }

  static ModelBasicDeviceInfo? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelBasicDeviceInfo.of(
    ModelBasicDeviceInfo other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelBasicDeviceInfo.of: $e');
      rethrow;
    }
  }

  static ModelBasicDeviceInfo? ofOrNull(
    ModelBasicDeviceInfo? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelBasicDeviceInfo.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelBasicDeviceInfo.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelBasicDeviceInfo? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelBasicDeviceInfo.fromJson(decoded);
      } else {
        return const ModelBasicDeviceInfo.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelBasicDeviceInfo.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelBasicDeviceInfo.fromJson: $e');
      rethrow;
    }
  }

  static ModelBasicDeviceInfo? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final operatingSystem =
          otherData?['operating_system']?.toString().trim().nullIfEmpty;
      final userAgent = otherData?['user_agent']?.toString().trim().nullIfEmpty;
      final isInstalled = letBool(otherData?['is_installed']);
      return ModelBasicDeviceInfo(
        operatingSystem: operatingSystem,
        userAgent: userAgent,
        isInstalled: isInstalled,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelBasicDeviceInfo.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelBasicDeviceInfo.fromUri: $e');
      rethrow;
    }
  }

  static ModelBasicDeviceInfo? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelBasicDeviceInfo.fromJson(uri.queryParameters);
      } else {
        return const ModelBasicDeviceInfo.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final operatingSystem0 = this.operatingSystem?.trim().nullIfEmpty;
      final userAgent0 = this.userAgent?.trim().nullIfEmpty;
      final isInstalled0 = this.isInstalled;
      final withNulls = {
        'userAgent': userAgent0,
        'operatingSystem': operatingSystem0,
        'isInstalled': isInstalled0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelBasicDeviceInfo.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelBasicDeviceInfo copyWith(BaseModel? other, {bool merge = false}) {
    final a = this.toJson();
    final b = other?.toJson() ?? {};
    final data0 = merge ? mergeDataDeep(a, b) : {...a, ...b};
    final data1 = letMapOrNull<String, dynamic>(data0);
    return ModelBasicDeviceInfo.fromJson(data1);
  }

  //
  //
  //

  // operatingSystem.
  String? get operatingSystemField => this.operatingSystem;

  // userAgent.
  String? get userAgentField => this.userAgent;

  // isInstalled.
  bool? get isInstalledField => this.isInstalled;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class ModelBasicDeviceInfoFieldNames {
  //
  //
  //

  static const operatingSystem = 'operatingSystem';
  static const userAgent = 'userAgent';
  static const isInstalled = 'isInstalled';

  //
  //
  //

  const ModelBasicDeviceInfoFieldNames._();
}
