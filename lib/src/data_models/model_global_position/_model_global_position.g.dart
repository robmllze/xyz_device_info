//.title
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//
// GENERATED BY DF GEN - DO NOT MODIFY BY HAND
// See: https://github.com/robmllze/df_gen
//
// ▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
//.title~

// ignore_for_file: annotate_overrides
// ignore_for_file: invalid_null_aware_operator
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_null_comparison
// ignore_for_file: unnecessary_question_mark
// ignore_for_file: unnecessary_this

part of 'model_global_position.dart';

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

class ModelGlobalPosition extends _ModelGlobalPosition {
  //
  //
  //

  static const CLASS_NAME = 'ModelGlobalPosition';

  @override
  String get $className => CLASS_NAME;

  final double? altitude;
  final double? latitude;
  final double? longitude;

  //
  //
  //

  const ModelGlobalPosition({
    this.altitude,
    this.latitude,
    this.longitude,
  });

  const ModelGlobalPosition.c2({
    this.altitude,
    this.latitude,
    this.longitude,
  });

  factory ModelGlobalPosition.c3({
    double? altitude,
    double? latitude,
    double? longitude,
  }) {
    return ModelGlobalPosition(
      altitude: altitude,
      latitude: latitude,
      longitude: longitude,
    );
  }

  factory ModelGlobalPosition.from(
    BaseModel? other,
  ) {
    try {
      return fromOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelGlobalPosition.from: $e');
      rethrow;
    }
  }

  static ModelGlobalPosition? fromOrNull(
    BaseModel? other,
  ) {
    return fromJsonOrNull(other?.toJson())!;
  }

  factory ModelGlobalPosition.of(
    ModelGlobalPosition other,
  ) {
    try {
      return ofOrNull(other)!;
    } catch (e) {
      assert(false, 'ModelGlobalPosition.of: $e');
      rethrow;
    }
  }

  static ModelGlobalPosition? ofOrNull(
    ModelGlobalPosition? other,
  ) {
    return fromJsonOrNull(other?.toJson());
  }

  factory ModelGlobalPosition.fromJsonString(
    String source,
  ) {
    try {
      return fromJsonStringOrNull(source)!;
    } catch (e) {
      assert(false, 'ModelGlobalPosition.fromJsonString: $e');
      rethrow;
    }
  }

  static ModelGlobalPosition? fromJsonStringOrNull(
    String? source,
  ) {
    try {
      if (source!.isNotEmpty) {
        final decoded = jsonDecode(source);
        return ModelGlobalPosition.fromJson(decoded);
      } else {
        return const ModelGlobalPosition.c2();
      }
    } catch (_) {
      return null;
    }
  }

  factory ModelGlobalPosition.fromJson(
    Map<String, dynamic>? otherData,
  ) {
    try {
      return fromJsonOrNull(otherData)!;
    } catch (e) {
      assert(false, 'ModelGlobalPosition.fromJson: $e');
      rethrow;
    }
  }

  static ModelGlobalPosition? fromJsonOrNull(
    Map<String, dynamic>? otherData,
  ) {
    try {
      final altitude = letDouble(otherData?['altitude']);
      final latitude = letDouble(otherData?['latitude']);
      final longitude = letDouble(otherData?['longitude']);
      return ModelGlobalPosition(
        altitude: altitude,
        latitude: latitude,
        longitude: longitude,
      );
    } catch (e) {
      return null;
    }
  }

  factory ModelGlobalPosition.fromUri(
    Uri? uri,
  ) {
    try {
      return fromUriOrNull(uri)!;
    } catch (e) {
      assert(false, 'ModelGlobalPosition.fromUri: $e');
      rethrow;
    }
  }

  static ModelGlobalPosition? fromUriOrNull(
    Uri? uri,
  ) {
    try {
      if (uri != null && uri.path == CLASS_NAME) {
        return ModelGlobalPosition.fromJson(uri.queryParameters);
      } else {
        return const ModelGlobalPosition.c2();
      }
    } catch (_) {
      return null;
    }
  }

  //
  //
  //

  @override
  Map<String, dynamic> toJson({
    bool includeNulls = false,
  }) {
    try {
      final altitude0 = this.altitude;
      final latitude0 = this.latitude;
      final longitude0 = this.longitude;
      final withNulls = {
        'longitude': longitude0,
        'latitude': latitude0,
        'altitude': altitude0,
      };
      return includeNulls ? withNulls : withNulls.nonNulls;
    } catch (e) {
      assert(false, 'ModelGlobalPosition.toJson: $e');
      rethrow;
    }
  }

  //
  //
  //

  @override
  ModelGlobalPosition copyWith(BaseModel? other, {bool merge = false}) {
    final a = this.toJson();
    final b = other?.toJson() ?? {};
    final data0 = merge ? mergeDataDeep(a, b) : {...a, ...b};
    final data1 = letMapOrNull<String, dynamic>(data0);
    return ModelGlobalPosition.fromJson(data1);
  }

  //
  //
  //

  // altitude.
  double? get altitudeField => this.altitude;

  // latitude.
  double? get latitudeField => this.latitude;

  // longitude.
  double? get longitudeField => this.longitude;
}

// ░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░

final class ModelGlobalPositionFieldNames {
  //
  //
  //

  static const altitude = 'altitude';
  static const latitude = 'latitude';
  static const longitude = 'longitude';

  //
  //
  //

  const ModelGlobalPositionFieldNames._();
}
